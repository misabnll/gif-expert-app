{"version":3,"sources":["components/AddCategory.js","helpers/getGift.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBAAOO,KAAO,OAAOC,MAAST,EAAYU,SAfxB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,kDACoCC,UAAUH,GAD9C,gEAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAET,CAACpB,IAEIqB,EDdwBM,CAAa3B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QA6BpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,cACZ,qBAAKJ,UAAU,YAAf,SAGYH,EAAOJ,KAAI,SAACC,GAAD,OAEP,aADA,CACC,EAAD,eAEQA,GADCA,EAAIC,aE1C5BiB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAGQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCpBtC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.000093b9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {PropTypes} from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 0){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input type = \"text\" value = {inputValue} onChange = {handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n    \r\n}","export const getGift = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q= ${encodeURI(category)} &limit=10&api_key=67gJWyv3bwKxgcTDQdsU4PKgs3ui0L1O`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    //? por si no devuelve nada\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        } \r\n    })\r\n    //Guardar respuesta en useState\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getGift } from '../helpers/getGift';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    //Custom hooks, mandar category de parametro\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    /*\r\n    const [images, setImages] = useState([])\r\n    useEffect(() =>{\r\n        getGift(category)\r\n        .then(setImages)\r\n    },[category]);\r\n    */\r\n    //Esta en helpers\r\n/*\r\n    const getGift = async() => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q= ${encodeURI(category)} &limit=10&api_key=67gJWyv3bwKxgcTDQdsU4PKgs3ui0L1O`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n        //? por si no devuelve nada\r\n        const gifs = data.map(img =>{\r\n            return {\r\n                id:img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            } \r\n        })\r\n        //Guardar respuesta en useState\r\n        setImages(gifs);\r\n    }\r\n*/\r\n    //Se llama desde useEffect para evitar llamadas al renderizar componente\r\n    //getGift();\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__bounce'>{category}</h3>\r\n            {loading && 'Cargando...'}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        //Desestruturar con {}   \r\n                        images.map((img) =>(\r\n                            //<li key = { id }>{title}</li>\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGift } from \"../helpers/getGift\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() =>{\r\n        getGift(category)\r\n        .then(imgs =>{\r\n            setTimeout(()=>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n            }, 3000);\r\n        })\r\n    },[category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    /*\r\n    const handleAdd = () => {\r\n        //Dos formas de hacerlo\r\n        //setCategories([...categories, 'Death Note']);\r\n        setCategories(cats => [...cats, 'Death Note']);\r\n    }\r\n    */\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    //Si devuelve solo un objeto se ponen prentesis y no hace falta declarar return\r\n                    categories.map(category =>(\r\n                        <GifGrid key={category} category={category} />\r\n                        //return <li key = { category }>{category}</li>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}